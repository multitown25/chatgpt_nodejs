import {session, Telegraf, Markup} from 'telegraf';
import config from 'config';
import {message} from "telegraf/filters";
import {code} from "telegraf/format";
import {openai} from './services/openai.js';
import {escapeMarkdownV2} from "./utils/escaper.js";
import authMiddleware from "./middlewares/auth-middleware.js";
import mongoose from "mongoose";
import UserService from "./services/user-service.js";
import CompanyService from "./services/company-service.js";
import RequestService from "./services/request-service.js";
import updateLastActivityMiddleware from "./middlewares/updateLastActivity-middleware.js";
import * as path from "node:path";
import {fileURLToPath} from 'url';
import * as fs from "node:fs";
import redis from "redis";
import {marked} from 'marked';
import {removeFile} from "./utils/removeFile.js";
import {ogg} from "./ogg.js";
import {rateLimiter} from "./middlewares/rateLimiter-middleware.js";


const AVAILABLE_MODELS = [
    {
        name: "OpenAI o1-preview",
        description: "–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –ø—É—Ç–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥—É–µ—Ç 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        picture: "üçì"
    },
    {
        name: "OpenAI o1-mini",
        description: "–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–¥–∞, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –Ω–∞—É—á–Ω—ã—Ö –∑–∞–¥–∞—á",
        picture: "ü§ñ"
    },
    {
        name: "gpt-4o",
        description: "—É–º–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å OpenAI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏",
        picture: "üî•"
    },
    {
        name: "gpt-4o-mini",
        description: "–±—ã—Å—Ç—Ä–∞—è –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å OpenAI –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
        picture: "‚úîÔ∏è"
    },
]

const REGISTER_FORMAT = '\n—Ä–æ–ª—å\nusername —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç–∞';
const USERS_PER_PAGE = 5;

const bot = new Telegraf(config.get('TG_BOT_TOKEN'));

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const logFilePath = path.join(__dirname, 'error.log');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
function logError(error) {
    const errorMessage = `[${new Date().toISOString()}] ${error.stack || error}\n`;
    fs.appendFile(logFilePath, errorMessage, (err) => {
        if (err) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤:', err);
        }
    });
}

bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, err);
    logError(err);
});

bot.use(session());
bot.use(authMiddleware);
bot.use(updateLastActivityMiddleware);
const limiter = rateLimiter(2, 5);
bot.use(limiter);

bot.telegram.setMyCommands([
    {command: '/start', description: '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ'},
    {command: '/register', description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
    {command: '/model', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ OpenAI'},
    {command: '/new', description: '–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç'},
    {command: '/showusers', description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'},
    {command: '/delete', description: '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
]);

bot.command('new', async (ctx) => {
    ctx.session = {
        messages: [],
        systemMessages: []
    };
    await ctx.reply('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ñ–¥—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
});

bot.command('showusers', async (ctx) => {
    try {
        const currentUser = await UserService.getUser({telegramId: ctx.from.id.toString()});
        const users = await UserService.getUsers({'company.name': currentUser.company.name});

        if (users.length === 0) {
            await ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.');
            return;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const generateMessage = (page) => {
            const start = page * USERS_PER_PAGE;
            const end = start + USERS_PER_PAGE;
            const paginatedUsers = users.slice(start, end);

            const messages = paginatedUsers.map((user, index) => {
                const userIndex = start + index + 1;
                return `
*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIndex}:*
*–ò–º—è:* ${escapeMarkdownV2(user.firstname)}
*–§–∞–º–∏–ª–∏—è:* ${escapeMarkdownV2(user.lastname)}
*Username:* @${escapeMarkdownV2(user.telegramUsername)}
*–ö–æ–º–ø–∞–Ω–∏—è:* ${escapeMarkdownV2(user.company.name)}
*–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${user.lastActivity}
*–ê–∫—Ç–∏–≤–µ–Ω:* ${user.isActive ? '–î–∞' : '–ù–µ—Ç'}
                `;
            });

            const fullMessage = messages.join('\n---\n');
            return fullMessage;
        };

        const totalPages = Math.ceil(users.length / USERS_PER_PAGE);
        let currentPage = 0;

        const createKeyboard = (page) => {
            const buttons = [];

            if (page > 0) {
                buttons.push(Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', `prev_${page}`));
            } else {
                buttons.push(Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'noop'));
            }

            buttons.push(Markup.button.callback(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`, 'noop'));

            if (page < totalPages - 1) {
                buttons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', `next_${page}`));
            } else {
                buttons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', 'noop'));
            }

            return Markup.inlineKeyboard([buttons]);
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        await ctx.reply(generateMessage(currentPage), {
            parse_mode: 'Markdown',
            ...createKeyboard(currentPage)
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        bot.action(/(next|prev)_(\d+)/, async (ctx) => {
            const action = ctx.match[1];
            const page = parseInt(ctx.match[2]);

            let newPage;
            if (action === 'next') {
                newPage = page + 1;
                if (newPage >= totalPages) {
                    newPage = totalPages - 1;
                }
            } else if (action === 'prev') {
                newPage = page - 1;
                if (newPage < 0) {
                    newPage = 0;
                }
            }

            await ctx.editMessageText(generateMessage(newPage), {
                parse_mode: 'Markdown',
                ...createKeyboard(newPage)
            });

            await ctx.answerCbQuery();
        });

        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è (noop)
        bot.action('noop', (ctx) => {
            ctx.answerCbQuery();
        });

    } catch (error) {
        console.error(error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
});

bot.command('start', async (ctx) => {
    const tgId = ctx.from.id;
    const tgUsername = ctx.from.username;
    let welcomeMessage = (config.get('WELCOME_MESSAGE'));

    // check user register
    const user = await UserService.getUser({telegramUsername: tgUsername});

    if (!user) {
        await ctx.reply(welcomeMessage + `\n ${config.get('NOT_REGISTERED')}`);
        return;
    }

    const updatedUser = await UserService.updateUser({telegramUsername: tgUsername}, {telegramId: tgId});
    ctx.session = {
        messages: [],
        systemMessages: []
    };

    await ctx.reply(welcomeMessage);

    if (!user.firstname || !user.lastname) {
        await ctx.reply('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!');
        ctx.session.systemMessages.push({type: 'updateUser', data: ctx.message.text})
    }
});

bot.command('register', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    ctx.session.systemMessages.push({type: 'register', data: ctx.message.text})

    const systemMessage = await ctx.reply(code(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..`));
    setTimeout(() => {
        ctx.deleteMessage(systemMessage.message_id).catch((err) => {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
            throw err;
        });
    }, 2500)
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n' + REGISTER_FORMAT,
        Markup.inlineKeyboard([
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'close')]
        ]))
});
// –≤–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ middleware?
bot.command('delete', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    ctx.session.systemMessages.push({type: 'delete', data: ctx.message.text});
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        Markup.inlineKeyboard([
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'close')]
        ]))
});

bot.command('model', async (ctx) => {
    // const
    const currentModel = await UserService.getUserModel(ctx.from.id.toString());
    let welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n
–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${currentModel?.name}.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n`;
    AVAILABLE_MODELS.forEach(model => {
        welcomeMessage += `${model.picture} ${model.name} ‚Äî ${model.description}.\n\n`
    })

    await ctx.reply(welcomeMessage,
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å', 'changeModel')],
            [Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å', 'close')],
        ]));
});

bot.action('changeModel', async (ctx) => {
    console.log(ctx.update.callback_query.message.text);

    const modelButtons = AVAILABLE_MODELS.map(model => {
        return [Markup.button.callback(model.name, `setModel_${model.name}`)]
    });

    await ctx.editMessageText(ctx.update.callback_query.message.text, Markup.inlineKeyboard(modelButtons));
    // await ctx.editMessageText(availableModels);
});

bot.command('test', async (ctx) => {
    console.log('next')
    await ctx.reply('–ó–∞–∫–ª—é—á–µ–Ω–∏–µ');
    // await ctx.replyWithMarkdown('### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ');
    // await ctx.reply('### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ');
});

bot.action(/setModel_(.+)/, async (ctx) => {
    const selectedModel = ctx.match[1].replace("OpenAI", "").trim();

    // await ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: ${selectedModel}`);
    const response = await UserService.setUserModel(ctx.from.id.toString(), selectedModel);

    if (response) {
        await ctx.editMessageText(`–£—Å–ø–µ—à–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: ${selectedModel}.`);
    } else {
        await ctx.editMessageText(`Something wrong..`);
    }
    // console.log(response);
});

bot.action('close', async (ctx) => {
    if (ctx.session) {
        ctx.session.systemMessages = [];
    }

    await ctx.editMessageReplyMarkup();
    await ctx.editMessageText("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
});

function splitMessage(text, maxLength = 4096) {
    const messages = [];
    let current = '';
    const tagStack = []; // –°—Ç–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö Markdown-—ç–ª–µ–º–µ–Ω—Ç–æ–≤

    // –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
    const markdownTags = {
        '```': 'codeBlock',                 // –ë–ª–æ–∫ –∫–æ–¥–∞
        '`': 'inlineCode',                  // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∫–æ–¥
        '**': 'bold',                       // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        '*': 'italic',                      // –ö—É—Ä—Å–∏–≤
        '~~': 'strikethrough',              // –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
        '[]()': 'link',                     // –°—Å—ã–ª–∫–∞
        '![]()': 'image',                   // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å—Ç–µ–∫–∞
    function closeTags() {
        let closing = '';
        while (tagStack.length > 0) {
            const tag = tagStack.pop();
            for (const key in markdownTags) {
                if (markdownTags[key] === tag) {
                    closing += key;
                    break;
                }
            }
        }
        return closing;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–≥–æ–≤ –∏–∑ —Å—Ç–µ–∫–∞
    function openTags() {
        let opening = '';
        tagStack.forEach(tag => {
            for (const key in markdownTags) {
                if (markdownTags[key] === tag) {
                    opening += key;
                    break;
                }
            }
        });
        return opening;
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
    const lines = text.split('\n');

    for (let originalLine of lines) {
        let line = originalLine;
        let i = 0;

        while (i < line.length) {
            let matched = false;

            const tags = Object.keys(markdownTags);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ (``` , **, ~~)
            for (const tag of tags) {
                if (line.startsWith(tag, i)) {
                    const currentTag = markdownTags[tag];
                    const lastTag = tagStack[tagStack.length - 1];

                    if (lastTag === currentTag) {
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–≥
                        current += tag;
                        tagStack.pop();
                    } else {
                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–≥
                        current += tag;
                        tagStack.push(currentTag);
                    }
                    i += tag.length;
                    matched = true;
                    break;
                }
            }

            if (!matched) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª
                current += line[i];
                i++;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ —Ç–µ–≥–∞
            if (current.length >= maxLength) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
                current += closeTags();
                messages.push(current);
                current = '';

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Ç–µ –∂–µ —Ç–µ–≥–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                current += openTags();
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        current += '\n';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        if (current.length > maxLength) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
            current += closeTags();
            messages.push(current);
            current = '';
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Ç–µ –∂–µ —Ç–µ–≥–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current += openTags();
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if (current.length > 0) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ–≥–∏
        current += closeTags();
        messages.push(current);
    }

    return messages;
}


async function register(ctx) {
    const inputDataArr = ctx.message.text.split('\n');
    const data = {
        roleName: inputDataArr[0],
        companyName: await CompanyService.getCompanyNameByUserTgId(ctx.from.id.toString()),
        telegramUsername: inputDataArr[1]
    }

    ctx.session.systemMessages.push({type: 'registerConfirm', data})
    const newUserText = `–†–æ–ª—å: ${data.roleName}\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${data.companyName}\n–¢–µ–ª–µ–≥—Ä–∞–º–º username: ${data.telegramUsername}`;


    await ctx.reply(`–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n${newUserText}`,
        Markup.inlineKeyboard([
            [Markup.button.callback('–î–∞', 'register')],
            [Markup.button.callback('–ù–µ—Ç..', 'registerCancel')]
        ]));
    // ctx.session.messages.pop(); // –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
}

async function deleteUser(ctx) {
    const username = await ctx.message.text;

    const user = await UserService.getUser({telegramUsername: username});
    if (!user) {
        return await ctx.editMessageText('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è..');
    }
    const res = await UserService.deleteUser({telegramUsername: username});
    if (res.deletedCount === 1) {
        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramUsername} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`)
    } else {
        await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..')
    }
}

async function updateUser(ctx) {
    const regex = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+ [A-Za-z–ê-–Ø–∞-—è–Å—ë]+$/; // –¥–≤–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª, —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã

    try {
        if (!regex.test(ctx.message.text)) {
            return await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)',
                Markup.inlineKeyboard([
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', 'close')]
                ]));
        }
        const userInfo = ctx.message.text.split(' ');
        const updatedUser = await UserService.updateUser({telegramId: ctx.from.id.toString()}, {
            firstname: userInfo[0],
            lastname: userInfo[1]
        });

        const sysMessage = await ctx.reply(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
        setTimeout(() => {
            ctx.deleteMessage(sysMessage.message_id).catch((err) => {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
                throw err;
            });
        }, 2500);

        const welcomeMessage = config.get('WELCOME_MESSAGE').replace(/(–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç)/, `$1, ${userInfo[0]} ${userInfo[1]}`);
        await ctx.reply(welcomeMessage);
        ctx.session.systemMessages = [];

    } catch (e) {
        console.log('Error from register action', e);
        await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..\n' + e);
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        throw e;
    }
}

bot.on(message('voice'), async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    try {
        await ctx.reply(code('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...'))
        const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id)
        const userId = String(ctx.message.from.id)
        const oggPath = await ogg.create(link.href, userId);
        // console.log('oggPath', oggPath);
        const mp3Path = await ogg.toMp3(oggPath, userId);
        // console.log('mp3Path', mp3Path);
        // removeFile(oggPath);
        const text = await openai.transcription(mp3Path)
        await ctx.reply(code(`–í–∞—à –∑–∞–ø—Ä–æ—Å: ${text}`));
        ctx.session.messages.push({role: openai.roles.USER, content: text})
        const model = await UserService.getUserModel(ctx.from.id.toString());
        const response = await openai.chat(ctx.session.messages, model.name);
        ctx.session.messages.push({role: openai.roles.ASSISTANT, content: response.content})
        await ctx.reply(response.content);
    } catch (e) {
        console.error(`Error while proccessing voice message`, e.message)
    }
})

const RULE = `–°–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 4096. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º`
bot.on(message('text'), async (ctx) => {
    ctx.session ??= {
        messages: [{role: openai.roles.ASSISTANT, content: RULE}],
        systemMessages: []
    };
    try {
        // console.log(ctx.from);
        const lastSystemMessage = ctx.session.systemMessages[ctx.session.systemMessages.length - 1];
        if (lastSystemMessage?.type === 'register') { // type?
            await register(ctx);
            return;
        }
        if (lastSystemMessage?.type === 'updateUser') {
            await updateUser(ctx);
            return;
        }
        if (lastSystemMessage?.type === 'delete') {
            await deleteUser(ctx);
            return;
        }

        await ctx.reply(code('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...'));
        // await ctx.reply(code(`–í–∞—à –∑–∞–ø—Ä–æ—Å: ${ctx.message.text}`))
        // await ctx.reply(JSON.stringify(ctx.message, null, 2));
        ctx.session.messages.push({role: openai.roles.USER, content: ctx.message.text})
        // const messages = [{role: openai.roles.USER, content: ctx.message.text}];
        // await ctx.reply(JSON.stringify(ctx.session, null, 2));

        const model = await UserService.getUserModel(ctx.from.id.toString());
        console.log('MODEL', model);
        const response = await openai.chat(ctx.session.messages, model.name);

        ctx.session.messages.push({role: openai.roles.ASSISTANT, content: response.content})

        // const text = escapeMarkdownV2(response.content);
        // console.log(text.length);

        const splittedText = splitMessage(response.content, 4000);
        for await (const chunk of splittedText) {
            console.log('chunk length', chunk.length);
            await ctx.reply(chunk, {parse_mode: 'Markdown', disable_web_page_preview: true});
        }

        // console.log(response.content.length)
        // await ctx.reply(response.content);
        const user = await UserService.getUser({telegramId: ctx.from.id.toString()});
        // const model = await ModelService.getModelById(user.modelId);
        const request = await RequestService.create(
            model.name,
            ctx.message.text,
            response.content,
            response.tokens.promptTokens,
            response.tokens.completionTokens,
            response.tokens.totalTokens,
            (response.tokens.promptTokens * model.inputPrice) + (response.tokens.completionTokens * model.outputPrice)
        );
        // console.log(request);

    } catch (e) {
        console.log('Error from text message', e);
        throw e;
    }
});

bot.action('register', async (ctx) => {
    try {
        await ctx.editMessageReplyMarkup();
        await ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..');

        const userData = ctx.session.systemMessages.pop().data;
        const response = await UserService.register(userData.roleName, userData.companyName, userData.telegramUsername);

        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`)
        ctx.session.systemMessages = [];

    } catch (e) {
        console.log('Error from register action', e);
        await ctx.reply('–û—Ç–∫–∞–∑–∞–Ω–æ!\n' + e);
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        throw e;
    }
});

bot.action('registerCancel', async (ctx) => {
    await ctx.editMessageReplyMarkup();
    await ctx.editMessageText('–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏..')

    setTimeout(async () => {
        await ctx.editMessageText('–û—Ç–º–µ–Ω–µ–Ω–æ.');
    }, 1200)

    ctx.session.systemMessages = [];
});

const start = async () => {
    await mongoose.connect(config.get("MONGO_URI"), {
        useNewUrlParser: true,
        useUnifiedTopology: true
    }).then(() => {
        console.log('Successfully connected to MongoDB');
    }).catch(err => {
        console.error('Error connecting to MongoDB', err);
    });



    bot.launch();
}

start();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));