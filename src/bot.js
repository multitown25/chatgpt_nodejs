import {Markup, session, Telegraf} from 'telegraf';
import {message} from "telegraf/filters";
import {code} from "telegraf/format";
import {openai} from './services/openai.js';
import {escapeMarkdownV2} from "./utils/escaper.js";
import authMiddleware from "./middlewares/auth-middleware.js";
import mongoose from "mongoose";
import UserService from "./services/user-service.js";
import CompanyService from "./services/company-service.js";
import RequestService from "./services/request-service.js";
import Wallet from "./models/wallet-model.js"
import updateLastActivityMiddleware from "./middlewares/updateLastActivity-middleware.js";
import * as path from "node:path";
import {fileURLToPath} from 'url';
import * as fs from "node:fs/promises";
import {ogg} from "./ogg.js";
import {rateLimiter} from "./middlewares/rateLimiter-middleware.js";
import {resolve} from "path";
import {stability} from "./services/stability.js";
import {imageHelper} from "./imageHelper.js";
import axios from "axios";
import dotenv from "dotenv";
dotenv.config();
import {createPayment} from "./services/paymentService.js";
import express from "express";
import paymentRoutes from "./routes/paymentRoutes.js";
import webhookRoutes from "./routes/webhookRoutes.js";


const AVAILABLE_MODELS = [
    {
        name: "OpenAI o1-preview",
        description: "–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –ø—É—Ç–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥—É–µ—Ç 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        picture: "üçì"
    },
    {
        name: "OpenAI o1-mini",
        description: "–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–¥–∞, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –Ω–∞—É—á–Ω—ã—Ö –∑–∞–¥–∞—á",
        picture: "ü§ñ"
    },
    {
        name: "gpt-4o",
        description: "—É–º–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å OpenAI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏",
        picture: "üî•"
    },
    {
        name: "gpt-4o-mini",
        description: "–±—ã—Å—Ç—Ä–∞—è –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å OpenAI –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
        picture: "‚úîÔ∏è"
    },
]

const WELCOME_MESSAGE = '\uD83C\uDF1F –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! \uD83C\uDF1F\n\n–ü—Ä–∏–≤–µ—Ç, —è ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç FLX, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –∏ —Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ. –í–æ—Ç —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å:\n\n\uD83D\uDD39 –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\uD83D\uDD39 –ü–æ–º–æ—â—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\uD83D\uDD39 –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\uD83D\uDD39 –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∑–∞–¥–∞—á.\n\n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ –∑–∞ –ª—é–±–æ–π –ø–æ–º–æ—â—å—é –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –∏ –ø–æ–º–æ—á—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ!'
const REGISTER_FORMAT = '\n—Ä–æ–ª—å\nusername —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç–∞';
const USERS_PER_PAGE = 5;

const bot = new Telegraf(process.env.TG_BOT_TOKEN);


const app = express();

// Middleware
app.use(express.json());
console.log("DOMAIN", process.env.BASE_URL_NO_PORT)
app.use(await bot.createWebhook({ domain: process.env.BASE_URL_NO_PORT }));

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const logFilePath = path.join(__dirname, 'error.log');

// –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const MESSAGES_DIR = path.join(__dirname, 'messages');
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const initialize = async () => {
    try {
        await fs.mkdir(MESSAGES_DIR, {recursive: true});
        console.log(`–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${MESSAGES_DIR}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
};

// –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
async function logError(error) {
    const errorMessage = `[${new Date().toISOString()}] ${error.stack || error}\n`;
    await fs.appendFile(logFilePath, errorMessage, (err) => {
        if (err) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤:', err);
        }
    });
}

async function writeToFileAndSend(ctx, messageText) {
    const timestamp = Date.now();
    const userId = ctx.from.id;
    const filename = `message_${userId}_${timestamp}.txt`;
    const filepath = path.join(MESSAGES_DIR, filename);

    try {
        // –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        await fs.writeFile(filepath, messageText, 'utf-8');
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ñ–∞–π–ª: ${filepath}`);

        await ctx.replyWithDocument({source: filepath}, {caption: '–í–∞—à–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ñ–∞–π–ª.'});
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error?.data);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        throw error;
    }
}

bot.catch(async (err, ctx) => {
    console.error('ERROR FROM CATCH', err);
    if (err.error?.code === 'insufficient_quota') {
        await ctx.reply('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
    }

    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, err.stack);
    logError(err);
});

bot.use(session());
bot.use(authMiddleware);
bot.use(updateLastActivityMiddleware);
const limiter = rateLimiter(2, 5);
bot.use(limiter);

bot.telegram.setMyCommands([
    {command: '/start', description: '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ'},
    {command: '/new', description: '–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç'},
    {command: '/register', description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
    {command: '/model_info', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ OpenAI'},
    {command: '/change_permission', description: '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
    {command: '/balance', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–º–ø–∞–Ω–∏–∏'},
    {command: '/show_users', description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'},
    {command: '/delete', description: '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
]);

bot.command('new', async (ctx) => {
    ctx.session = {
        messages: [],
        systemMessages: []
    };
    await ctx.reply('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ñ–¥—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
});

bot.command('show_users', async (ctx) => {
    try {
        const currentUser = await UserService.getUser({telegramId: ctx.from.id.toString()});
        const users = await UserService.getUsers({'company.name': currentUser.company.name});

        if (users.length === 0) {
            await ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.');
            return;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const generateMessage = (page) => {
            const start = page * USERS_PER_PAGE;
            const end = start + USERS_PER_PAGE;
            const paginatedUsers = users.slice(start, end);

            const messages = paginatedUsers.map((user, index) => {
                const userIndex = start + index + 1;
                return `
*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIndex}:*
*–ò–º—è:* ${escapeMarkdownV2(user.firstname)}
*–§–∞–º–∏–ª–∏—è:* ${escapeMarkdownV2(user.lastname)}
*Username:* @${escapeMarkdownV2(user.telegramUsername)}
*–ö–æ–º–ø–∞–Ω–∏—è:* ${escapeMarkdownV2(user.company.name)}
*–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${user.lastActivity}
*–ê–∫—Ç–∏–≤–µ–Ω:* ${user.isActive ? '–î–∞' : '–ù–µ—Ç'}
                `;
            });

            const fullMessage = messages.join('\n---\n');
            return fullMessage;
        };

        const totalPages = Math.ceil(users.length / USERS_PER_PAGE);
        let currentPage = 0;

        const createKeyboard = (page) => {
            const buttons = [];

            if (page > 0) {
                buttons.push(Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', `prev_${page}`));
            } else {
                buttons.push(Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'noop'));
            }

            buttons.push(Markup.button.callback(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`, 'noop'));

            if (page < totalPages - 1) {
                buttons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', `next_${page}`));
            } else {
                buttons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', 'noop'));
            }

            return Markup.inlineKeyboard([buttons]);
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        await ctx.reply(generateMessage(currentPage), {
            parse_mode: 'Markdown',
            ...createKeyboard(currentPage)
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        bot.action(/(next|prev)_(\d+)/, async (ctx) => {
            const action = ctx.match[1];
            const page = parseInt(ctx.match[2]);

            let newPage;
            if (action === 'next') {
                newPage = page + 1;
                if (newPage >= totalPages) {
                    newPage = totalPages - 1;
                }
            } else if (action === 'prev') {
                newPage = page - 1;
                if (newPage < 0) {
                    newPage = 0;
                }
            }

            await ctx.editMessageText(generateMessage(newPage), {
                parse_mode: 'Markdown',
                ...createKeyboard(newPage)
            });

            await ctx.answerCbQuery();
        });

        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è (noop)
        bot.action('noop', (ctx) => {
            ctx.answerCbQuery();
        });

    } catch (error) {
        console.error(error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
});

const TERMS_TEXT = `

–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º –Ω–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞:

‚ö° *–î–æ–∫—É–º–µ–Ω—Ç 1:*  
–°—Å—ã–ª–∫–∞

üîí *–î–æ–∫—É–º–µ–Ω—Ç 2:*  
–°—Å—ã–ª–∫–∞

‚öñÔ∏è *–î–æ–∫—É–º–µ–Ω—Ç 3:*  
–°—Å—ã–ª–∫–∞

–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É **"–°–æ–≥–ª–∞—Å–µ–Ω"**, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∏–º–∏.
`;

bot.command('start', async (ctx) => {
    const tgId = ctx.from.id;
    const tgUsername = ctx.from.username;
    let welcomeMessage = (WELCOME_MESSAGE);

    // check user register
    const user = await UserService.getUser({telegramUsername: tgUsername});

    if (!user) {
        await ctx.reply(`\n ${process.env.NOT_REGISTERED}`);
        return;
    }

    const updatedUser = await UserService.updateUser({telegramUsername: tgUsername}, {telegramId: tgId});
    ctx.session = {
        messages: [],
        systemMessages: []
    };

    await ctx.reply(welcomeMessage);

    if (!user.termsAccepted) {
        return ctx.reply(TERMS_TEXT, Markup.inlineKeyboard([
            [Markup.button.callback('–°–æ–≥–ª–∞—Å–µ–Ω', 'accept_terms')]
        ]), { parse_mode: 'Markdown' });
    }

    if (!user.firstname || !user.lastname) {
        await ctx.reply('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!');
        ctx.session.systemMessages.push({type: 'updateUser', data: ctx.message.text})
    }
});

bot.action('accept_terms', async (ctx) => {
    try {
        if (ctx.user && !ctx.user.termsAccepted) {
            await UserService.updateUser({telegramId: ctx.from.id.toString()}, {
                termsAccepted: true
            });
        }

        ctx.answerCbQuery(); // —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏
        return ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.', { parse_mode: 'Markdown' });
    } catch (err) {
        console.error(err);
        return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.');
    }
});

bot.command('register', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    ctx.session.systemMessages.push({type: 'register', data: ctx.message.text})

    const systemMessage = await ctx.reply(code(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..`));
    setTimeout(() => {
        ctx.deleteMessage(systemMessage.message_id).catch((err) => {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
            throw err;
        });
    }, 2500)
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n' + REGISTER_FORMAT,
        Markup.inlineKeyboard([
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'close')]
        ]))
});

// –ö–æ–º–∞–Ω–¥–∞ /pay
bot.command('pay', async (ctx) => {
    ctx.session.systemMessages.push({type: 'pay', data: ctx.message.text})

    // –ó–∞–¥–∞–µ–º —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', Markup.inlineKeyboard([
        [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'close')]
    ]));
});

bot.command('balance', async (ctx) => {
   try {
       const company = ctx.user.company;
       const wallet = await Wallet.findOne({ company: company.id });

       const balance = parseFloat(wallet.balance.toString());
       const formattedBalance = balance.toLocaleString('ru-RU', {
           minimumFractionDigits: 2,
           maximumFractionDigits: 2
       });

       // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
       const updatedAtFormatted = new Date(wallet.updatedAt).toLocaleDateString('ru-RU', {
           day: 'numeric',
           month: 'long',
           year: 'numeric'
       });
       const message = `
üéâ *–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!* üéâ

üí∞ *–ë–∞–ª–∞–Ω—Å:* ${formattedBalance} ${wallet.currency}
üìÖ *–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:* ${updatedAtFormatted}

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!
    `;

       return ctx.reply(message, { parse_mode: 'Markdown' });
   } catch (e) {
       throw e;
   }
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const ALL_PERMISSIONS = [
    'register', 'delete', 'show_users', 'text_messages', 'voice_messages',
    'model_info', 'change_model', 'image', 'upscale', 'outpaint',
    'replace', 'recolor', 'removebg', 'sketch', 'style', 'change_permission', 'new', 'pay', 'balance'
];

// –ö–æ–º–∞–Ω–¥–∞ /change_permission
bot.command('change_permission', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUser = await UserService.getUser({telegramId: ctx.from.id.toString()});
        if (!currentUser) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await currentUser.populate('roleId');
        if (currentUser.roleId.name !== 'admin') {
            return ctx.reply('üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–π –∂–µ –∫–æ–º–ø–∞–Ω–∏–∏
        const companyName = currentUser.company.name;
        const allUsers = await UserService.getUsersWithRoles({'company.name': companyName}).then(data => data.filter(item => item.telegramId));

        if (allUsers.length === 0) {
            return ctx.reply('üì≠ –í –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
        }

        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const totalPages = Math.ceil(allUsers.length / USERS_PER_PAGE);
        const pages = [];

        for (let i = 0; i < totalPages; i++) {
            const pageUsers = allUsers.slice(i * USERS_PER_PAGE, (i + 1) * USERS_PER_PAGE);
            pages.push(pageUsers);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.changePermission = {
            pages: pages,
            currentPage: 0,
            totalPages: totalPages,
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const firstPage = pages[0];
        const userButtons = firstPage.map(user => [
            Markup.button.callback(`${user.telegramId.toString()} (${user.telegramUsername})`, `select_user_${user._id}`)
        ]);

        const navigationButtons = [];
        if (totalPages > 1) {
            navigationButtons.push(Markup.button.callback('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', `page_1`));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
        navigationButtons.push(Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_change_permission'));

        await ctx.reply(
            'üõ† **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:**',
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([...userButtons, navigationButtons])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
bot.action(/page_(\d+)/, async (ctx) => {
    try {
        const requestedPage = parseInt(ctx.match[1]); // –ù—É–ª–µ–≤–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
        const sessionData = ctx.session.changePermission;

        if (!sessionData) {
            return ctx.reply('‚ùó –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥—É /change_permission.');
        }

        if (requestedPage < 0 || requestedPage >= sessionData.totalPages) {
            return ctx.reply('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–µ—Å—Å–∏–∏
        sessionData.currentPage = requestedPage;

        const pageUsers = sessionData.pages[requestedPage];
        console.log(pageUsers);
        const userButtons = pageUsers.map(user => [
            Markup.button.callback(`${user.telegramId.toString()} (${user.telegramUsername})`, `select_user_${user._id}`)
        ]);

        const navigationButtons = [];

        if (sessionData.totalPages > 1) {
            if (requestedPage > 0) {
                navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `page_${requestedPage - 1}`));
            }
            if (requestedPage < sessionData.totalPages - 1) {
                navigationButtons.push(Markup.button.callback('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', `page_${requestedPage + 1}`));
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª
        navigationButtons.push(Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_change_permission'));

        const pageNumber = requestedPage + 1;
        const totalPages = sessionData.totalPages;

        await ctx.editMessageText(
            `üõ† **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –∏–∑ ${totalPages}):**`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([...userButtons, navigationButtons])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action(/select_user_(.+)/, async (ctx) => {
    try {
        const userId = ctx.match[1];
        const selectedUser = await UserService.getUserWithRole({_id: userId});

        if (!selectedUser) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        const effectivePermissions = await selectedUser.getEffectivePermissions();

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        const permissionButtons = effectivePermissions.map(perm => [
            Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å "${perm}"`, `remove_perm_${userId}_${perm}`)
        ]);

        // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const availableToAdd = ALL_PERMISSIONS.filter(perm => !effectivePermissions.includes(perm));

        const addButtons = availableToAdd.map(perm => [
            Markup.button.callback(`‚úÖ –î–æ–±–∞–≤–∏—Ç—å "${perm}"`, `add_perm_${userId}_${perm}`)
        ]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.changePermission.selectedUser = {
            id: userId,
            telegramId: selectedUser.telegramId.toString(), // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è
        };

        await ctx.reply(
            `üîπ **–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
${effectivePermissions.length > 0 ? effectivePermissions.join(', ') : '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π'}`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ', `show_add_${userId}`)],
                    ...permissionButtons,
                    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'back_to_users')],
                    [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_change_permission')]
                ])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
bot.action(/add_perm_(.+)_(.+)/, async (ctx) => {
    try {
        const userId = ctx.match[1];
        const permission = ctx.match[2];

        const user = await UserService.getUser({_id: userId});
        if (!user) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if (user.customPermissions.add.includes(permission)) {
            return ctx.reply(`‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ "${permission}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.`);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        user.customPermissions.add.push(permission);
        // –£–±–∏—Ä–∞–µ–º –∏–∑ remove, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å
        user.customPermissions.remove = user.customPermissions.remove.filter(perm => perm !== permission);
        await user.save();

        await ctx.answerCbQuery(`‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ "${permission}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
        const effectivePermissions = await user.getEffectivePermissions();

        await ctx.editMessageText(
            `üîπ **–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
${effectivePermissions.length > 0 ? effectivePermissions.join(', ') : '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π'}`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ', `show_add_${userId}`)],
                    ...effectivePermissions.map(perm => [
                        Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å "${perm}"`, `remove_perm_${userId}_${perm}`)
                    ]),
                    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'back_to_users')],
                    [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_change_permission')] // –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª
                ])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
bot.action(/remove_perm_(.+)_(.+)/, async (ctx) => {
    try {
        const userId = ctx.match[1];
        const permission = ctx.match[2];

        const user = await UserService.getUser({_id: userId});
        if (!user) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if (user.customPermissions.remove.includes(permission)) {
            return ctx.reply(`‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ "${permission}" —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.`);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ remove
        user.customPermissions.remove.push(permission);
        // –£–±–∏—Ä–∞–µ–º –∏–∑ add, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å
        user.customPermissions.add = user.customPermissions.add.filter(perm => perm !== permission);
        await user.save();

        await ctx.answerCbQuery(`‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ "${permission}" —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
        const effectivePermissions = await user.getEffectivePermissions();

        await ctx.editMessageText(
            `üîπ **–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
${effectivePermissions.length > 0 ? effectivePermissions.join(', ') : '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π'}`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ', `show_add_${userId}`)],
                    ...effectivePermissions.map(perm => [
                        Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å "${perm}"`, `remove_perm_${userId}_${perm}`)
                    ]),
                    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'back_to_users')],
                    [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_change_permission')] // –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª
                ])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
bot.action(/show_add_(.+)/, async (ctx) => {
    try {
        const userId = ctx.match[1];
        const user = await UserService.getUserWithRole({_id: userId});
        if (!user) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        const effectivePermissions = await user.getEffectivePermissions();
        const availableToAdd = ALL_PERMISSIONS.filter(perm => !effectivePermissions.includes(perm));

        if (availableToAdd.length === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
        }

        const addButtons = availableToAdd.map(perm => [
            Markup.button.callback(`‚úÖ –î–æ–±–∞–≤–∏—Ç—å "${perm}"`, `add_perm_${userId}_${perm}`)
        ]);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª
        addButtons.push([Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_change_permission')]);

        await ctx.reply(
            'üÜï **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:**',
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    ...addButtons,
                    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'back_to_user_permissions')]
                ])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('back_to_user_permissions', async (ctx) => {
    try {
        const selectedUser = ctx.session.changePermission.selectedUser;
        if (!selectedUser || !selectedUser.id) {
            return ctx.reply('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }

        const user = await UserService.getUserWithRole({_id: selectedUser.id});
        if (!user) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        const effectivePermissions = await user.getEffectivePermissions();

        await ctx.editMessageText(
            `üîπ **–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
${effectivePermissions.length > 0 ? effectivePermissions.join(', ') : '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π'}`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ', `show_add_${selectedUser.id}`)],
                    ...effectivePermissions.map(perm => [
                        Markup.button.callback(`‚ùå –£–¥–∞–ª–∏—Ç—å "${perm}"`, `remove_perm_${selectedUser.id}_${perm}`)
                    ]),
                    [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'back_to_users')],
                    [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_change_permission')] // –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª
                ])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.action('back_to_users', async (ctx) => {
    try {
        const sessionData = ctx.session.changePermission;

        if (!sessionData) {
            return ctx.reply('‚ùó –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥—É /change_permission.');
        }

        const currentPage = sessionData.currentPage;
        const pageUsers = sessionData.pages[currentPage];
        const userButtons = pageUsers.map(user => [
            Markup.button.callback(`${user.telegramId.toString()} (${user.telegramUsername})`, `select_user_${user._id}`)
        ]);

        const navigationButtons = [];

        if (sessionData.totalPages > 1) {
            if (currentPage > 0) {
                navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `page_${currentPage - 1}`));
            }
            if (currentPage < sessionData.totalPages - 1) {
                navigationButtons.push(Markup.button.callback('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', `page_${currentPage + 1}`));
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª
        navigationButtons.push(Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_change_permission'));

        const pageNumber = currentPage + 1;
        const totalPages = sessionData.totalPages;

        await ctx.editMessageText(
            `üõ† **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –∏–∑ ${totalPages}):**`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([...userButtons, navigationButtons])
            }
        );

    } catch (error) {
        console.error(error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 */
bot.action('cancel_change_permission', async (ctx) => {
    try {
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        ctx.session.changePermission = null;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await ctx.reply('üõë –ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –æ—Ç–º–µ–Ω—ë–Ω.');

        // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.');
    }
});


// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
// bot.on('callback_query', async (ctx) => {
//     if (!ctx.callbackQuery) return;
//     await ctx.answerCbQuery('‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
// });

// –≤–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ middleware?
bot.command('delete', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    ctx.session.systemMessages.push({type: 'delete', data: ctx.message.text});
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        Markup.inlineKeyboard([
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å', 'close')]
        ]))
});

bot.command('model_info', async (ctx) => {
    // const
    const currentModel = await UserService.getUserModel(ctx.from.id.toString());
    let welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n
–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${currentModel?.name}.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n`;
    AVAILABLE_MODELS.forEach(model => {
        welcomeMessage += `${model.picture} ${model.name} ‚Äî ${model.description}.\n\n`
    })

    await ctx.reply(welcomeMessage,
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å', 'changeModel')],
            [Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å', 'close')],
        ]));
});

bot.command('test', async (ctx) => {
    console.log('next')
    await ctx.reply('–ó–∞–∫–ª—é—á–µ–Ω–∏–µ');
    // await ctx.replyWithMarkdown('### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ');
    // await ctx.reply('### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ');
});


bot.command('image', async (ctx) => {
    console.log(typeof ctx.from.id);
    console.log(ctx.from.id.toString());

    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    ctx.session.systemMessages.push({type: 'image', data: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')

});

bot.command('upscale', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    ctx.session.systemMessages.push({type: 'upscale', data: 'Upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞ —Å–∂–∞—Ç–∏–µ')

});

bot.command('outpaint', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    ctx.session.systemMessages.push({type: 'outpaint', data: 'Outpaint –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞ —Å–∂–∞—Ç–∏–µ')

});

bot.command('replace', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    ctx.session.systemMessages.push({type: 'replace', data: 'Replace –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞ —Å–∂–∞—Ç–∏–µ')

});

bot.command('recolor', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    ctx.session.systemMessages.push({type: 'recolor', data: 'Recolor –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞ —Å–∂–∞—Ç–∏–µ')

});

bot.command('removebg', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    ctx.session.systemMessages.push({type: 'removebg', data: 'Remove background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞ —Å–∂–∞—Ç–∏–µ')

});

bot.command('sketch', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    ctx.session.systemMessages.push({type: 'sketch', data: 'Sketch –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞ —Å–∂–∞—Ç–∏–µ')

});

bot.command('style', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    ctx.session.systemMessages.push({type: 'style', data: 'Style –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –Ω–∞ —Å–∂–∞—Ç–∏–µ')

});

function splitMessage(text, maxLength = 4096) {
    const messages = [];
    let current = '';
    const tagStack = []; // –°—Ç–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö Markdown-—ç–ª–µ–º–µ–Ω—Ç–æ–≤

    // –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
    const markdownTags = {
        '```': 'codeBlock',                 // –ë–ª–æ–∫ –∫–æ–¥–∞
        '`': 'inlineCode',                  // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∫–æ–¥
        '**': 'bold',                       // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        '*': 'italic',                      // –ö—É—Ä—Å–∏–≤
        '~~': 'strikethrough',              // –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
        '[]()': 'link',                     // –°—Å—ã–ª–∫–∞
        '![]()': 'image',                   // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å—Ç–µ–∫–∞
    function closeTags() {
        let closing = '';
        while (tagStack.length > 0) {
            const tag = tagStack.pop();
            for (const key in markdownTags) {
                if (markdownTags[key] === tag) {
                    closing += key;
                    break;
                }
            }
        }
        return closing;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–≥–æ–≤ –∏–∑ —Å—Ç–µ–∫–∞
    function openTags() {
        let opening = '';
        tagStack.forEach(tag => {
            for (const key in markdownTags) {
                if (markdownTags[key] === tag) {
                    opening += key;
                    break;
                }
            }
        });
        return opening;
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
    const lines = text.split('\n');

    for (let originalLine of lines) {
        let line = originalLine;
        let i = 0;

        while (i < line.length) {
            let matched = false;

            const tags = Object.keys(markdownTags);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ (``` , **, ~~)
            for (const tag of tags) {
                if (line.startsWith(tag, i)) {
                    const currentTag = markdownTags[tag];
                    const lastTag = tagStack[tagStack.length - 1];

                    if (lastTag === currentTag) {
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–≥
                        current += tag;
                        tagStack.pop();
                    } else {
                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–≥
                        current += tag;
                        tagStack.push(currentTag);
                    }
                    i += tag.length;
                    matched = true;
                    break;
                }
            }

            if (!matched) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª
                current += line[i];
                i++;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ —Ç–µ–≥–∞
            if (current.length >= maxLength) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
                current += closeTags();
                messages.push(current);
                current = '';

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Ç–µ –∂–µ —Ç–µ–≥–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                current += openTags();
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        current += '\n';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        if (current.length > maxLength) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
            current += closeTags();
            messages.push(current);
            current = '';
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Ç–µ –∂–µ —Ç–µ–≥–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current += openTags();
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if (current.length > 0) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ–≥–∏
        current += closeTags();
        messages.push(current);
    }

    return messages;
}

async function payment(ctx) {
    try {
        if (!ctx.user.company.id) {
            return ctx.reply('–£ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.');
        }

        // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        const amount = parseFloat(ctx.message.text);
        if (isNaN(amount) || amount <= 0) {
            return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');
        }

        const description = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.user.telegramUsername}`;
        const response = await axios.post(`http://ch.flx-it.ru:8020/payment/create-payment`, {
            companyId: ctx.user.company.id,
            amount: amount,
            chatId: ctx.chat.id,
            description: description
        });

        const {confirmationUrl} = response.data;
        if (confirmationUrl) {
            await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmationUrl}`);
        } else {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } catch (error) {
        console.error('Pay command error:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
    }
}

async function register(ctx) {
    const inputDataArr = ctx.message.text.split('\n');
    const data = {
        roleName: inputDataArr[0],
        companyName: await CompanyService.getCompanyNameByUserTgId(ctx.from.id.toString()),
        telegramUsername: inputDataArr[1].replace("@", "")
    }

    ctx.session.systemMessages.push({type: 'registerConfirm', data})
    const newUserText = `–†–æ–ª—å: ${data.roleName}\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${data.companyName}\n–¢–µ–ª–µ–≥—Ä–∞–º–º username: ${data.telegramUsername}`;


    await ctx.reply(`–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n${newUserText}`,
        Markup.inlineKeyboard([
            [Markup.button.callback('–î–∞', 'register')],
            [Markup.button.callback('–ù–µ—Ç..', 'cancel')]
        ]));
    // ctx.session.messages.pop(); // –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
}

async function deleteUser(ctx) {
    const username = await ctx.message.text;

    const user = await UserService.getUser({telegramUsername: username});
    if (!user) {
        return await ctx.editMessageText('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è..');
    }
    const res = await UserService.deleteUser({telegramUsername: username});
    if (res.deletedCount === 1) {
        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramUsername} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`)
    } else {
        await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..')
    }
}

async function updateUser(ctx) {
    const regex = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+ [A-Za-z–ê-–Ø–∞-—è–Å—ë]+$/; // –¥–≤–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª, —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã

    try {
        if (!regex.test(ctx.message.text)) {
            return await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)',
                Markup.inlineKeyboard([
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', 'close')]
                ]));
        }
        const userInfo = ctx.message.text.split(' ');
        const updatedUser = await UserService.updateUser({telegramId: ctx.from.id.toString()}, {
            firstname: userInfo[0],
            lastname: userInfo[1]
        });

        const sysMessage = await ctx.reply(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
        setTimeout(() => {
            ctx.deleteMessage(sysMessage.message_id).catch((err) => {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
                throw err;
            });
        }, 2500);

        const welcomeMessage = WELCOME_MESSAGE.replace(/(–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç)/, `$1, ${userInfo[0]} ${userInfo[1]}`);
        await ctx.reply(welcomeMessage);
        ctx.session.systemMessages = [];

    } catch (e) {
        console.log('Error from register action', e);
        await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..\n' + e);
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        throw e;
    }
}

async function downloadImageFromTgServers(ctx) {
    try {
        const photoArray = ctx.message.photo;
        if (photoArray.length > 0) {
            await ctx.reply(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –û–±—Ä–∞–±–æ—Ç–∫–∞..`);
        }

        const photo = photoArray[photoArray.length - 1];
        const fileId = photo.file_id;

        const file = await ctx.telegram.getFile(fileId);
        console.log(file);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TG_BOT_TOKEN}/${file.file_path}`;

        const fileName = `photo_${fileId}.png`; // –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const filePath = path.resolve(__dirname, '../images/downloads', fileName);

        return await imageHelper.downloadImage(fileUrl, filePath);

        // return fileName;
    } catch (err) {
        console.log('Error while downloading image from tg servers', err);
        throw err;
    }
}

async function generateImage(ctx) {
    try {
        // add opportunity to choose output format
        const prompt = await openai.translateText(ctx.message.text, '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π');
        await ctx.reply(`'${prompt}'\n –ü—Ä–∏–Ω—è—Ç–æ! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const imageBuffer = await stability.generateImage(prompt, ctx.from.id.toString());

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images', `${filename}.png`)
        const image = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        await ctx.replyWithPhoto({source: image});
        ctx.session.systemMessages = [];
        console.log(ctx.session);

    } catch (err) {
        console.log('Error from /image command', err);

        if (err.response?.status === 403) {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Stability AI –æ—Ç–º–µ—Ç–∏–ª–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –µ–≥–æ.')
        }
        throw err;
    }
}

async function upscaleImage(ctx) {
    try {
        await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ! Upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const inputFile = await downloadImageFromTgServers(ctx);
        await ctx.replyWithPhoto({source: inputFile});

        const imageBuffer = await stability.upscaleImage(inputFile);

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images/upscale', `${filename}.png`)
        const outputImage = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        ctx.session.systemMessages = [];
        console.log(ctx.session);
        return outputImage;

    } catch (err) {
        console.log('Error from upscale image function', err.stack);
        throw err;
    }
}

async function outpaintImage(ctx) {
    try {
        await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ! Outpaint –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const inputFile = await downloadImageFromTgServers(ctx);
        await ctx.replyWithPhoto({source: inputFile});

        const imageBuffer = await stability.outpaintImage(inputFile);

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images/outpaint', `${filename}.png`)
        const outputImage = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        ctx.session.systemMessages = [];
        console.log(ctx.session);
        return outputImage;

    } catch (err) {
        // console.log('Error from erase image function', err.stack);
        throw err;
    }
}

async function searchAndReplaceImage(ctx) {
    try {
        await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ! Search and replace –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const inputFile = await downloadImageFromTgServers(ctx);
        await ctx.replyWithPhoto({source: inputFile});

        const imageBuffer = await stability.searchAndReplaceImage(inputFile);

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images/search-and-replace', `${filename}.png`)
        const outputImage = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        ctx.session.systemMessages = [];
        console.log(ctx.session);
        return outputImage;

    } catch (err) {
        // console.log('Error from erase image function', err.stack);
        throw err;
    }
}

async function searchAndRecolorImage(ctx) {
    try {
        await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ! Search and recolor –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const inputFile = await downloadImageFromTgServers(ctx);
        await ctx.replyWithPhoto({source: inputFile});

        const imageBuffer = await stability.searchAndRecolorImage(inputFile);

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images/search-and-recolor', `${filename}.png`)
        const outputImage = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        ctx.session.systemMessages = [];
        console.log(ctx.session);
        return outputImage;

    } catch (err) {
        // console.log('Error from erase image function', err.stack);
        throw err;
    }
}

async function removeBackgroundImage(ctx) {
    try {
        await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ! Remove background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const inputFile = await downloadImageFromTgServers(ctx);
        await ctx.replyWithPhoto({source: inputFile});

        const imageBuffer = await stability.removeBackgroundImage(inputFile);

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images/remove-background', `${filename}.png`)
        const outputImage = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        ctx.session.systemMessages = [];
        console.log(ctx.session);
        return outputImage;

    } catch (err) {
        // console.log('Error from erase image function', err.stack);
        throw err;
    }
}

async function sketchImage(ctx) {
    try {
        await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ! Sketch –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const inputFile = await downloadImageFromTgServers(ctx);
        await ctx.replyWithPhoto({source: inputFile});

        const imageBuffer = await stability.sketchImage(inputFile);

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images/sketch', `${filename}.png`)
        const outputImage = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        ctx.session.systemMessages = [];
        console.log(ctx.session);
        return outputImage;

    } catch (err) {
        // console.log('Error from erase image function', err.stack);
        throw err;
    }
}

async function styleImage(ctx) {
    try {
        await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ! Style –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..`);
        const inputFile = await downloadImageFromTgServers(ctx);
        await ctx.replyWithPhoto({source: inputFile});

        const imageBuffer = await stability.styleImage(inputFile);

        const filename = ctx.from.id.toString() + '_' + new Date().toISOString();
        const imagePath = resolve(__dirname, '../images/style', `${filename}.png`)
        const outputImage = await imageHelper.saveImageBuffer(imageBuffer, imagePath);

        ctx.session.systemMessages = [];
        console.log(ctx.session);
        return outputImage;

    } catch (err) {
        // console.log('Error from erase image function', err.stack);
        throw err;
    }
}

bot.on(message('voice'), async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    try {
        await ctx.reply(code('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...'))
        const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id)
        const userId = String(ctx.message.from.id)
        const oggPath = await ogg.create(link.href, userId);
        // console.log('oggPath', oggPath);
        const mp3Path = await ogg.toMp3(oggPath, userId);
        // console.log('mp3Path', mp3Path);
        // removeFile(oggPath);
        const text = await openai.transcription(mp3Path)
        await ctx.reply(code(`–í–∞—à –∑–∞–ø—Ä–æ—Å: ${text}`));
        ctx.session.messages.push({role: openai.roles.USER, content: text})
        const model = await UserService.getUserModel(ctx.from.id.toString());
        const response = await openai.chat(ctx.session.messages, model.name);
        ctx.session.messages.push({role: openai.roles.ASSISTANT, content: response.content})
        await ctx.reply(response.content);
    } catch (e) {
        console.error(`Error while proccessing voice message`, e.message)
    }
})

bot.on('photo', async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };

    try {
        const lastSystemMessage = ctx.session.systemMessages[ctx.session.systemMessages.length - 1];

        if (lastSystemMessage?.type === 'upscale') {
            const outputImage = await upscaleImage(ctx);
            return await ctx.replyWithPhoto({source: outputImage});
        }

        if (lastSystemMessage?.type === 'outpaint') {
            const outputImage = await outpaintImage(ctx);
            return await ctx.replyWithPhoto({source: outputImage});
        }

        if (lastSystemMessage?.type === 'replace') {
            const outputImage = await searchAndReplaceImage(ctx);
            return await ctx.replyWithPhoto({source: outputImage});
        }

        if (lastSystemMessage?.type === 'recolor') {
            const outputImage = await searchAndRecolorImage(ctx);
            return await ctx.replyWithPhoto({source: outputImage});
        }

        if (lastSystemMessage?.type === 'removebg') {
            const outputImage = await removeBackgroundImage(ctx);
            return await ctx.replyWithPhoto({source: outputImage});
        }

        if (lastSystemMessage?.type === 'sketch') {
            const outputImage = await sketchImage(ctx);
            return await ctx.replyWithPhoto({source: outputImage});
        }

        if (lastSystemMessage?.type === 'style') {
            const outputImage = await styleImage(ctx);
            return await ctx.replyWithPhoto({source: outputImage});
        }


        // await ctx.replyWithPhoto({source: outputImage});

    } catch (err) {
        // console.log('Error from photo message', err);
        throw err;
    }
});

bot.on(message('text'), async (ctx) => {
    ctx.session ??= {
        messages: [],
        systemMessages: []
    };
    let response;

    const session = await mongoose.startSession(); // –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    session.startTransaction();
    try {
        // console.log(ctx.from);
        const lastSystemMessage = ctx.session.systemMessages[ctx.session.systemMessages.length - 1];
        if (lastSystemMessage?.type === 'register') { // type?
            await register(ctx);
            await session.commitTransaction();
            session.endSession();
            return;
        }
        if (lastSystemMessage?.type === 'updateUser') {
            await updateUser(ctx);
            await session.commitTransaction();
            session.endSession();
            return;
        }
        if (lastSystemMessage?.type === 'delete') {
            await deleteUser(ctx);
            await session.commitTransaction();
            session.endSession();
            return;
        }

        if (lastSystemMessage?.type === 'image') {
            await generateImage(ctx);
            await session.commitTransaction();
            session.endSession();
            return;
        }

        if (lastSystemMessage?.type === 'pay') {
            await payment(ctx);
            await session.commitTransaction();
            session.endSession();
            return;
        }

        if (lastSystemMessage !== undefined) {
            await ctx.reply('–í—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏..');
            ctx.session.systemMessages = [];
        }

        await ctx.reply(code('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª. –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...'));

        const user = ctx.user;
        const wallet = await Wallet.findOne({ company: user.company.id }).session(session);
        if (!wallet) {
            await ctx.reply('–ö–æ—à–µ–ª–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            await session.abortTransaction();
            session.endSession();
            return;
        }

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∫–æ—à–µ–ª—å–∫–µ
        if (wallet.balance === undefined || wallet.balance === null) {
            await ctx.reply('–£ –∫–æ—à–µ–ª—å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–ª–∞–Ω—Å.');
            await session.abortTransaction();
            session.endSession();
            return;
        }

        const model = await UserService.getUserModel(ctx.from.id.toString());
        if (!model) {
            await ctx.reply('–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            await session.abortTransaction();
            session.endSession();
            return;
        }

        ctx.session.messages.push({role: openai.roles.USER, content: ctx.message.text})
        // await ctx.reply(JSON.stringify(ctx.session, null, 2));

        response = await openai.chat(ctx.session.messages, model.name);

        const { promptTokens, completionTokens, totalTokens } = response.tokens;
        const price = (promptTokens * model.inputPrice) + (completionTokens * model.outputPrice);

        const requestPrice = parseFloat(price.toString());

        // –ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞—Ç–æ–º–∞—Ä–Ω–æ —Å —É—Å–ª–æ–≤–∏–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
        const updatedWallet = await Wallet.findOneAndUpdate(
            {
                _id: wallet._id,
                balance: { $gte: requestPrice } // —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
            },
            {
                $inc: { balance: -requestPrice },
                $set: { updatedAt: Date.now() }
            },
            { new: true, session }
        );

        if (!updatedWallet) {
            await ctx.reply('–ù–∞ –∫–æ—à–µ–ª—å–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.');
            await session.abortTransaction();
            session.endSession();
            return;
        }

        ctx.session.messages.push({role: openai.roles.ASSISTANT, content: response.content})

        const splittedText = splitMessage(response.content, 4000);
        for await (const chunk of splittedText) {
            console.log('chunk length', chunk.length);
            await ctx.reply(chunk, {parse_mode: 'Markdown', disable_web_page_preview: true});
        }

        const requestRecord = await RequestService.create(
            model.name,
            user._id,
            user.company.id,
            ctx.message.text,
            response.content,
            promptTokens,
            completionTokens,
            totalTokens,
            mongoose.Types.Decimal128.fromString(requestPrice.toFixed(10)),
            { session }
        );

        // —Ñ–∏–∫—Å–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await session.commitTransaction();
        session.endSession();

    } catch (e) {
        // console.log('Error from text message', e);
        await session.abortTransaction();
        session.endSession();
        await writeToFileAndSend(ctx, response?.content);
        throw e;
    }
});

bot.action('changeModel', async (ctx) => {
    console.log(ctx.update.callback_query.message.text);

    const modelButtons = AVAILABLE_MODELS.map(model => {
        return [Markup.button.callback(model.name, `setModel_${model.name}`)]
    });

    await ctx.editMessageText(ctx.update.callback_query.message.text, Markup.inlineKeyboard(modelButtons));
    // await ctx.editMessageText(availableModels);
});

bot.action(/setModel_(.+)/, async (ctx) => {
    const selectedModel = ctx.match[1].replace("OpenAI", "").trim();

    // await ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: ${selectedModel}`);
    const response = await UserService.setUserModel(ctx.from.id.toString(), selectedModel);

    if (response) {
        await ctx.editMessageText(`–£—Å–ø–µ—à–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: ${selectedModel}.`);
    } else {
        await ctx.editMessageText(`Something wrong..`);
    }
    // console.log(response);
});

bot.action('close', async (ctx) => {
    if (ctx.session) {
        ctx.session.systemMessages = [];
    }

    await ctx.editMessageReplyMarkup();
    await ctx.editMessageText("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
});

bot.action('register', async (ctx) => {
    try {
        await ctx.editMessageReplyMarkup();
        await ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..');

        const userData = ctx.session.systemMessages.pop().data;
        const response = await UserService.register(userData.roleName, userData.companyName, userData.telegramUsername);

        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`)
        ctx.session.systemMessages = [];

    } catch (e) {
        console.log('Error from register action', e);
        await ctx.reply('–û—Ç–∫–∞–∑–∞–Ω–æ!\n' + e);
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        throw e;
    }
});

bot.action('cancel', async (ctx) => {
    await ctx.editMessageReplyMarkup();
    await ctx.editMessageText('–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è..')

    setTimeout(async () => {
        await ctx.editMessageText('–û—Ç–º–µ–Ω–µ–Ω–æ.');
    }, 1200)

    ctx.session.systemMessages = [];
});

app.use((req, res, next) => {
    console.log('Incoming request:', req.method, req.url, req.body, req.headers.referer);
    next();
});


app.use('/webhook', (req, res, next) => {
    console.log('Webhook request:', req.body);
    next();
});


// –ú–∞—Ä—à—Ä—É—Ç—ã
app.use('/payment', paymentRoutes);
app.use('/webhook', webhookRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Unhandled error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
});

const PORT = 8020;

const start = async () => {
    await mongoose.connect(process.env.MONGO_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true
    }).then(() => {
        console.log('Successfully connected to MongoDB');
    }).catch(err => {
        console.error('Error connecting to MongoDB', err);
    });

    app.listen(PORT, () => {
        console.log(`Server running on port ${PORT}`);
    });
}

start();

// process.once('SIGINT', () => bot.stop('SIGINT'));
// process.once('SIGTERM', () => bot.stop('SIGTERM'));

export default bot;